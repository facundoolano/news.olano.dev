// DO NOT EDIT: Code generated by matcha from atom_feed.matcha

import gleam/string_tree.{type StringTree}
import gleam/list

import feed.{type Entry}
import birl
import gleam/string

pub fn render_tree(entries entries: List(Entry)) -> StringTree {
    let tree = string_tree.from_string("")
    let tree = string_tree.append(tree, "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en\">
    <generator uri=\"https://news.olano.dev/\" version=\"0.0.1\"></generator>
    <link href=\"https://news.olano.dev/feed\" rel=\"self\" type=\"application/atom+xml\"/>
    <link href=\"https://news.olano.dev/\" rel=\"alternate\" type=\"text/html\"/>
    <updated>")
    let tree = string_tree.append(tree, birl.to_naive(birl.now()))
    let tree = string_tree.append(tree, "Z</updated>
    <id>https://news.olano.dev/feed</id>
    <title type=\"html\">news.olano.dev</title>
    <author><name>Facundo Olano</name></author>
    ")
    let tree = list.fold(entries, tree, fn(tree, entry) {
            let tree = string_tree.append(tree, "
        <entry>
            <title type=\"html\">")
    let tree = string_tree.append(tree, string.replace(entry.title, "&", "&amp;"))
    let tree = string_tree.append(tree, "</title>
            <link href=\"")
    let tree = string_tree.append(tree, entry.url)
    let tree = string_tree.append(tree, "\" rel=\"alternate\" type=\"text/html\" title=\"")
    let tree = string_tree.append(tree, string.replace(entry.title, "&", "&amp;"))
    let tree = string_tree.append(tree, "\"/>
            <published>")
    let tree = string_tree.append(tree, birl.to_naive(entry.published))
    let tree = string_tree.append(tree, "Z</published>
            <updated>")
    let tree = string_tree.append(tree, birl.to_naive(entry.published))
    let tree = string_tree.append(tree, "Z</updated>
            <id>")
    let tree = string_tree.append(tree, entry.url)
    let tree = string_tree.append(tree, "</id>
        </entry>
    ")

        tree
})
    let tree = string_tree.append(tree, "
</feed>
")

    tree
}

pub fn render(entries entries: List(Entry)) -> String {
    string_tree.to_string(render_tree(entries: entries))
}

